// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package selection

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection(in *jlexer.Lexer, out *selectionDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				in.Delim('[')
				if out.Content == nil {
					if !in.IsDelim(']') {
						out.Content = make([]contentDTO, 0, 0)
					} else {
						out.Content = []contentDTO{}
					}
				} else {
					out.Content = (out.Content)[:0]
				}
				for !in.IsDelim(']') {
					var v1 contentDTO
					(v1).UnmarshalEasyJSON(in)
					out.Content = append(out.Content, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection(out *jwriter.Writer, in selectionDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		if in.Content == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Content {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v selectionDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v selectionDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *selectionDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *selectionDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection(l, v)
}
func easyjson56de76c1DecodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection1(in *jlexer.Lexer, out *contentDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		case "sum_ratings":
			out.SumRatings = float64(in.Float64())
		case "count_ratings":
			out.CountRatings = uint64(in.Uint64())
		case "year":
			out.Year = int(in.Int())
		case "is_free":
			out.IsFree = bool(in.Bool())
		case "age_limit":
			out.AgeLimit = int(in.Int())
		case "trailer_url":
			out.TrailerURL = string(in.String())
		case "preview_url":
			out.PreviewURL = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection1(out *jwriter.Writer, in contentDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	{
		const prefix string = ",\"sum_ratings\":"
		out.RawString(prefix)
		out.Float64(float64(in.SumRatings))
	}
	{
		const prefix string = ",\"count_ratings\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CountRatings))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"is_free\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFree))
	}
	{
		const prefix string = ",\"age_limit\":"
		out.RawString(prefix)
		out.Int(int(in.AgeLimit))
	}
	{
		const prefix string = ",\"trailer_url\":"
		out.RawString(prefix)
		out.String(string(in.TrailerURL))
	}
	{
		const prefix string = ",\"preview_url\":"
		out.RawString(prefix)
		out.String(string(in.PreviewURL))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v contentDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v contentDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *contentDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *contentDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComGoParkMailRu20231ContentDealersInternalDeliverySelection1(l, v)
}
