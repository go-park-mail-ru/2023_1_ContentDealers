// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package history_views

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryViewsServiceClient is the client API for HistoryViewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryViewsServiceClient interface {
	UpdateProgressView(ctx context.Context, in *View, opts ...grpc.CallOption) (*Nothing, error)
	GetViewsByUser(ctx context.Context, in *ViewsOptions, opts ...grpc.CallOption) (*Views, error)
	HasView(ctx context.Context, in *View, opts ...grpc.CallOption) (*HasViewMessage, error)
}

type historyViewsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryViewsServiceClient(cc grpc.ClientConnInterface) HistoryViewsServiceClient {
	return &historyViewsServiceClient{cc}
}

func (c *historyViewsServiceClient) UpdateProgressView(ctx context.Context, in *View, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/history_views.HistoryViewsService/UpdateProgressView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyViewsServiceClient) GetViewsByUser(ctx context.Context, in *ViewsOptions, opts ...grpc.CallOption) (*Views, error) {
	out := new(Views)
	err := c.cc.Invoke(ctx, "/history_views.HistoryViewsService/GetViewsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyViewsServiceClient) HasView(ctx context.Context, in *View, opts ...grpc.CallOption) (*HasViewMessage, error) {
	out := new(HasViewMessage)
	err := c.cc.Invoke(ctx, "/history_views.HistoryViewsService/HasView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryViewsServiceServer is the server API for HistoryViewsService service.
// All implementations must embed UnimplementedHistoryViewsServiceServer
// for forward compatibility
type HistoryViewsServiceServer interface {
	UpdateProgressView(context.Context, *View) (*Nothing, error)
	GetViewsByUser(context.Context, *ViewsOptions) (*Views, error)
	HasView(context.Context, *View) (*HasViewMessage, error)
	mustEmbedUnimplementedHistoryViewsServiceServer()
}

// UnimplementedHistoryViewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryViewsServiceServer struct {
}

func (UnimplementedHistoryViewsServiceServer) UpdateProgressView(context.Context, *View) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgressView not implemented")
}
func (UnimplementedHistoryViewsServiceServer) GetViewsByUser(context.Context, *ViewsOptions) (*Views, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewsByUser not implemented")
}
func (UnimplementedHistoryViewsServiceServer) HasView(context.Context, *View) (*HasViewMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasView not implemented")
}
func (UnimplementedHistoryViewsServiceServer) mustEmbedUnimplementedHistoryViewsServiceServer() {}

// UnsafeHistoryViewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryViewsServiceServer will
// result in compilation errors.
type UnsafeHistoryViewsServiceServer interface {
	mustEmbedUnimplementedHistoryViewsServiceServer()
}

func RegisterHistoryViewsServiceServer(s grpc.ServiceRegistrar, srv HistoryViewsServiceServer) {
	s.RegisterService(&HistoryViewsService_ServiceDesc, srv)
}

func _HistoryViewsService_UpdateProgressView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(View)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryViewsServiceServer).UpdateProgressView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history_views.HistoryViewsService/UpdateProgressView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryViewsServiceServer).UpdateProgressView(ctx, req.(*View))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryViewsService_GetViewsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryViewsServiceServer).GetViewsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history_views.HistoryViewsService/GetViewsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryViewsServiceServer).GetViewsByUser(ctx, req.(*ViewsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryViewsService_HasView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(View)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryViewsServiceServer).HasView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history_views.HistoryViewsService/HasView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryViewsServiceServer).HasView(ctx, req.(*View))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryViewsService_ServiceDesc is the grpc.ServiceDesc for HistoryViewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryViewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "history_views.HistoryViewsService",
	HandlerType: (*HistoryViewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProgressView",
			Handler:    _HistoryViewsService_UpdateProgressView_Handler,
		},
		{
			MethodName: "GetViewsByUser",
			Handler:    _HistoryViewsService_GetViewsByUser_Handler,
		},
		{
			MethodName: "HasView",
			Handler:    _HistoryViewsService_HasView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history_views.proto",
}
