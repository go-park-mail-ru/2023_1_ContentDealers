// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_content is a generated GoMock package.
package mock_content

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2023_1_ContentDealers/content/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id uint64) (domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// GetByIDs mocks base method.
func (m *MockRepository) GetByIDs(ctx context.Context, ids []uint64) ([]domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockRepositoryMockRecorder) GetByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockRepository)(nil).GetByIDs), ctx, ids)
}

// GetFilmByContentID mocks base method.
func (m *MockRepository) GetFilmByContentID(ctx context.Context, id uint64) (domain.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmByContentID", ctx, id)
	ret0, _ := ret[0].(domain.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmByContentID indicates an expected call of GetFilmByContentID.
func (mr *MockRepositoryMockRecorder) GetFilmByContentID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmByContentID", reflect.TypeOf((*MockRepository)(nil).GetFilmByContentID), ctx, id)
}

// GetSeriesByContentID mocks base method.
func (m *MockRepository) GetSeriesByContentID(ctx context.Context, id uint64) (domain.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeriesByContentID", ctx, id)
	ret0, _ := ret[0].(domain.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesByContentID indicates an expected call of GetSeriesByContentID.
func (mr *MockRepositoryMockRecorder) GetSeriesByContentID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesByContentID", reflect.TypeOf((*MockRepository)(nil).GetSeriesByContentID), ctx, id)
}

// MockPersonRolesUseCase is a mock of PersonRolesUseCase interface.
type MockPersonRolesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRolesUseCaseMockRecorder
}

// MockPersonRolesUseCaseMockRecorder is the mock recorder for MockPersonRolesUseCase.
type MockPersonRolesUseCaseMockRecorder struct {
	mock *MockPersonRolesUseCase
}

// NewMockPersonRolesUseCase creates a new mock instance.
func NewMockPersonRolesUseCase(ctrl *gomock.Controller) *MockPersonRolesUseCase {
	mock := &MockPersonRolesUseCase{ctrl: ctrl}
	mock.recorder = &MockPersonRolesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRolesUseCase) EXPECT() *MockPersonRolesUseCaseMockRecorder {
	return m.recorder
}

// GetByContentID mocks base method.
func (m *MockPersonRolesUseCase) GetByContentID(ctx context.Context, ContentID uint64) ([]domain.PersonRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContentID", ctx, ContentID)
	ret0, _ := ret[0].([]domain.PersonRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContentID indicates an expected call of GetByContentID.
func (mr *MockPersonRolesUseCaseMockRecorder) GetByContentID(ctx, ContentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContentID", reflect.TypeOf((*MockPersonRolesUseCase)(nil).GetByContentID), ctx, ContentID)
}

// MockGenreRepository is a mock of GenreRepository interface.
type MockGenreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenreRepositoryMockRecorder
}

// MockGenreRepositoryMockRecorder is the mock recorder for MockGenreRepository.
type MockGenreRepositoryMockRecorder struct {
	mock *MockGenreRepository
}

// NewMockGenreRepository creates a new mock instance.
func NewMockGenreRepository(ctrl *gomock.Controller) *MockGenreRepository {
	mock := &MockGenreRepository{ctrl: ctrl}
	mock.recorder = &MockGenreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenreRepository) EXPECT() *MockGenreRepositoryMockRecorder {
	return m.recorder
}

// GetByContentID mocks base method.
func (m *MockGenreRepository) GetByContentID(ctx context.Context, ContentID uint64) ([]domain.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContentID", ctx, ContentID)
	ret0, _ := ret[0].([]domain.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContentID indicates an expected call of GetByContentID.
func (mr *MockGenreRepositoryMockRecorder) GetByContentID(ctx, ContentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContentID", reflect.TypeOf((*MockGenreRepository)(nil).GetByContentID), ctx, ContentID)
}

// MockSelectionRepository is a mock of SelectionRepository interface.
type MockSelectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionRepositoryMockRecorder
}

// MockSelectionRepositoryMockRecorder is the mock recorder for MockSelectionRepository.
type MockSelectionRepositoryMockRecorder struct {
	mock *MockSelectionRepository
}

// NewMockSelectionRepository creates a new mock instance.
func NewMockSelectionRepository(ctrl *gomock.Controller) *MockSelectionRepository {
	mock := &MockSelectionRepository{ctrl: ctrl}
	mock.recorder = &MockSelectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectionRepository) EXPECT() *MockSelectionRepositoryMockRecorder {
	return m.recorder
}

// GetByContentID mocks base method.
func (m *MockSelectionRepository) GetByContentID(ctx context.Context, ContentID uint64) ([]domain.Selection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContentID", ctx, ContentID)
	ret0, _ := ret[0].([]domain.Selection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContentID indicates an expected call of GetByContentID.
func (mr *MockSelectionRepositoryMockRecorder) GetByContentID(ctx, ContentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContentID", reflect.TypeOf((*MockSelectionRepository)(nil).GetByContentID), ctx, ContentID)
}

// MockCountryRepository is a mock of CountryRepository interface.
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository.
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance.
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// GetByContentID mocks base method.
func (m *MockCountryRepository) GetByContentID(ctx context.Context, ContentID uint64) ([]domain.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContentID", ctx, ContentID)
	ret0, _ := ret[0].([]domain.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContentID indicates an expected call of GetByContentID.
func (mr *MockCountryRepositoryMockRecorder) GetByContentID(ctx, ContentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContentID", reflect.TypeOf((*MockCountryRepository)(nil).GetByContentID), ctx, ContentID)
}
