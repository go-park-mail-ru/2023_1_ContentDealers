// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_genre is a generated GoMock package.
package mock_genre

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2023_1_ContentDealers/content/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(ctx context.Context) ([]domain.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(ctx context.Context, id uint64) (domain.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

// MockContentRepository is a mock of ContentRepository interface.
type MockContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryMockRecorder
}

// MockContentRepositoryMockRecorder is the mock recorder for MockContentRepository.
type MockContentRepositoryMockRecorder struct {
	mock *MockContentRepository
}

// NewMockContentRepository creates a new mock instance.
func NewMockContentRepository(ctrl *gomock.Controller) *MockContentRepository {
	mock := &MockContentRepository{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepository) EXPECT() *MockContentRepositoryMockRecorder {
	return m.recorder
}

// GetByGenreOptions mocks base method.
func (m *MockContentRepository) GetByGenreOptions(ctx context.Context, options domain.ContentFilter) ([]domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGenreOptions", ctx, options)
	ret0, _ := ret[0].([]domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGenreOptions indicates an expected call of GetByGenreOptions.
func (mr *MockContentRepositoryMockRecorder) GetByGenreOptions(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGenreOptions", reflect.TypeOf((*MockContentRepository)(nil).GetByGenreOptions), ctx, options)
}
