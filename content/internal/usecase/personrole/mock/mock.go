// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mock_personrole is a generated GoMock package.
package mock_personrole

import (
	context "context"
	reflect "reflect"

	domain "github.com/go-park-mail-ru/2023_1_ContentDealers/content/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// GetByContentID mocks base method.
func (m *MockPersonRepository) GetByContentID(ctx context.Context, ContentID uint64) ([]domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContentID", ctx, ContentID)
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContentID indicates an expected call of GetByContentID.
func (mr *MockPersonRepositoryMockRecorder) GetByContentID(ctx, ContentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContentID", reflect.TypeOf((*MockPersonRepository)(nil).GetByContentID), ctx, ContentID)
}

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// GetByContentID mocks base method.
func (m *MockRoleRepository) GetByContentID(ct context.Context, ContentID uint64) (map[uint64]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByContentID", ct, ContentID)
	ret0, _ := ret[0].(map[uint64]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByContentID indicates an expected call of GetByContentID.
func (mr *MockRoleRepositoryMockRecorder) GetByContentID(ct, ContentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByContentID", reflect.TypeOf((*MockRoleRepository)(nil).GetByContentID), ct, ContentID)
}
