// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: selection.proto

package selection

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SelectionServiceClient is the client API for SelectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelectionServiceClient interface {
	GetAll(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Selections, error)
	GetByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Selection, error)
}

type selectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectionServiceClient(cc grpc.ClientConnInterface) SelectionServiceClient {
	return &selectionServiceClient{cc}
}

func (c *selectionServiceClient) GetAll(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Selections, error) {
	out := new(Selections)
	err := c.cc.Invoke(ctx, "/selection.SelectionService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionServiceClient) GetByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Selection, error) {
	out := new(Selection)
	err := c.cc.Invoke(ctx, "/selection.SelectionService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectionServiceServer is the server API for SelectionService service.
// All implementations must embed UnimplementedSelectionServiceServer
// for forward compatibility
type SelectionServiceServer interface {
	GetAll(context.Context, *Nothing) (*Selections, error)
	GetByID(context.Context, *ID) (*Selection, error)
	mustEmbedUnimplementedSelectionServiceServer()
}

// UnimplementedSelectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSelectionServiceServer struct {
}

func (UnimplementedSelectionServiceServer) GetAll(context.Context, *Nothing) (*Selections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSelectionServiceServer) GetByID(context.Context, *ID) (*Selection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedSelectionServiceServer) mustEmbedUnimplementedSelectionServiceServer() {}

// UnsafeSelectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectionServiceServer will
// result in compilation errors.
type UnsafeSelectionServiceServer interface {
	mustEmbedUnimplementedSelectionServiceServer()
}

func RegisterSelectionServiceServer(s grpc.ServiceRegistrar, srv SelectionServiceServer) {
	s.RegisterService(&SelectionService_ServiceDesc, srv)
}

func _SelectionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selection.SelectionService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).GetAll(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _SelectionService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selection.SelectionService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServiceServer).GetByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// SelectionService_ServiceDesc is the grpc.ServiceDesc for SelectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SelectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "selection.SelectionService",
	HandlerType: (*SelectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _SelectionService_GetAll_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _SelectionService_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selection.proto",
}
